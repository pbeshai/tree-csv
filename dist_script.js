var csvData;
var rootNode;
var idKey = 'Source';
var parentKey = 'Target';
var colorKey = 'Emotion';
var specialKey = 'Is_Influencer';
var specialSizeFactor = 1.6;
var colorScale = d3.scaleOrdinal();
var highlightNode = null;

var queryParams = window.location.search
  .substring(1)
  .split('&')
  .filter(function (d) { return d !== ''; })
  .reduce(function (params, param) {
    var entry = param.split('=');
    params[entry[0]] = entry[1];
    return params;
  }, {});

var width = queryParams.width ? +queryParams.width : 800;
var height = queryParams.height ? +queryParams.height : 800;

// padding around the chart where axes will go
var padding = {
  top: 20,
  right: 20,
  bottom: 20,
  left: 20,
};

// inner chart dimensions, where the dots are plotted
var plotAreaWidth = width - padding.left - padding.right;
var plotAreaHeight = height - padding.top - padding.bottom;

function updateDimensions(w, h) {
  width = w;
  height = h;

  // inner chart dimensions, where the dots are plotted
  plotAreaWidth = width - padding.left - padding.right;
  plotAreaHeight = height - padding.top - padding.bottom;
}

// radius of points in the scatterplot
var pointRadius = 5;

// select the root container where the chart will be added
var rootContainer = d3.select('#root');

function render() {
  renderControls();
  renderLegend();
  renderTree();
  renderHighlight();
}

function renderControls() {
  console.log('render controls');
  d3.select('#read-csv-btn').on('click', function () {
    treeFromCsvTextArea();
    render();
  });
}

function isSpecial(d) {
  return !!d[specialKey] && d[specialKey] !== '0';
}

function renderHighlight() {
  var highlightContainer = rootContainer
    .select('.highlight-container')
    .empty()
    ? rootContainer
        .select('.vis-container')
        .append('div')
        .attr('class', 'highlight-container')
    : rootContainer.select('.highlight-container');

  if (!highlightNode) {
    highlightContainer.style('display', 'none');
    return;
  }
  var data = highlightNode.data;
  var highlightRowHtml = Object.keys(data)
    .map(
      function (key) { return ("<tr><td class='key'>" + key + "</td><td class='value'>" + (data[key]) + (key ===
        colorKey
          ? ("<span class='color-swatch' style='background: " + (colorScale(
              data[key]
            )) + "'></span>")
          : '') + "</td></tr>"); }
    )
    .join('');

  highlightContainer
    .style('display', '')
    .html(
      ("<table class='node-table'><tbody>" + highlightRowHtml + "</tbody></table>")
    );

  var ref = highlightContainer.node().getBoundingClientRect();
  var hWidth = ref.width;
  var hHeight = ref.height;

  var x = highlightNode.x;
  var y = highlightNode.y;
  x += padding.left;
  y += padding.top;
  var hMargin = 5;

  if (y + hHeight > height) {
    y -= hHeight;
    y -= hMargin;
  } else {
    y += hMargin;
  }

  if (x + hWidth > width) {
    x -= hWidth;
    x -= hMargin;
  } else {
    x += hMargin;
  }

  x = Math.max(0, x);

  console.log(highlightNode, x, y);
  highlightContainer.style('transform', ("translate(" + x + "px, " + y + "px)"));
}

function renderLegend() {
  /** Legend */
  var legendContainer = rootContainer.select('.legend').empty()
    ? rootContainer.append('div').attr('class', 'legend')
    : rootContainer.select('.legend');

  var legendBinding = legendContainer
    .selectAll('.legend-item')
    .data(colorScale.domain());
  legendBinding.exit().remove();
  var legendEntering = legendBinding
    .enter()
    .append('span')
    .attr('class', 'legend-item')
    .html(' tessssst');
  legendEntering
    .merge(legendBinding)
    .html(
      function (d) { return ("<span class='legend-swatch' style='background: " + (colorScale(
          d
        )) + "'></span><span class='legend-item-label'>" + d + "</span> "); }
    );
}

function renderTree() {
  console.log('render svg with rootNode', rootNode);
  // rootContainer.select('svg').remove();
  var nodes = rootNode ? rootNode.descendants() : [];
  var links = rootNode ? rootNode.links() : [];
  console.log('render svg with nodes', nodes);
  console.log('render svg with links', links);

  // initialize main SVG
  var svg = rootContainer.select('svg').empty()
    ? rootContainer.select('.vis-container').append('svg')
    : rootContainer.select('svg');

  svg.attr('width', width).attr('height', height);

  // the main <g> where all the chart content goes inside
  var g = svg.select('.root-g').empty()
    ? svg
        .append('g')
        .attr('class', 'root-g')
        .attr(
          'transform',
          'translate(' + padding.left + ' ' + padding.top + ')'
        )
    : svg.select('.root-g');

  var gLinks = g.select('.links').empty()
    ? g.append('g').attr('class', 'links')
    : g.select('.links');
  var gNodes = g.select('.nodes').empty()
    ? g.append('g').attr('class', 'nodes')
    : g.select('.nodes');

  // const highlightLabel = g.select('.highlight-label').empty()
  //   ? g
  //       .append('text')
  //       .attr('class', 'highlight-label')
  //       .attr('text-anchor', 'middle')
  //       .attr('dy', pointRadius + 18)
  //       .style('font-weight', '600')
  //       .style('pointer-events', 'none')
  //   : g.select('.highlight-label');

  // render nodes
  var nodesBinding = gNodes.selectAll('.node').data(nodes, function (d) { return d[idKey]; });
  nodesBinding.exit().remove();
  var nodesEnter = nodesBinding
    .enter()
    .append('circle')
    .attr('class', 'node')
    .attr('r', pointRadius)
    .attr('transform', function (d) { return ("translate(" + (d.x) + " " + (d.y) + ")"); })
    .on('mouseenter', function(d) {
      // highlightLabel
      //   .attr('transform', `translate(${d.x} ${d.y})`)
      //   .text(JSON.stringify(d.data));
      highlightNode = d;
      renderHighlight();
      d3.select(this).classed('highlighted', true);
    })
    .on('mouseleave', function() {
      // highlightLabel.text('');
      highlightNode = null;
      renderHighlight();
      d3.select(this).classed('highlighted', false);
    });

  nodesEnter
    .merge(nodesBinding)
    .classed('special', function (d) { return isSpecial(d.data); })
    .attr(
      'r',
      function (d) { return (isSpecial(d.data) ? specialSizeFactor * pointRadius : pointRadius); }
    )
    .attr('transform', function (d) { return ("translate(" + (d.x) + " " + (d.y) + ")"); })
    .style('fill', function (d) { return colorScale(d.data[colorKey]); });

  // render links
  var linksBinding = gLinks
    .selectAll('.link')
    .data(links, function (d) { return ((d.source[idKey]) + "--" + (d.target[idKey])); });
  linksBinding.exit().remove();

  var linksEnter = linksBinding
    .enter()
    .append('line')
    .attr('class', 'link')
    .attr('x1', function (d) { return d.source.x; })
    .attr('y1', function (d) { return d.source.y; })
    .attr('x2', function (d) { return d.target.x; })
    .attr('y2', function (d) { return d.target.y; });

  linksEnter
    .merge(linksBinding)
    .attr('x1', function (d) { return d.source.x; })
    .attr('y1', function (d) { return d.source.y; })
    .attr('x2', function (d) { return d.target.x; })
    .attr('y2', function (d) { return d.target.y; })
    .style('stroke', function (d) { return colorScale(d.target.data[colorKey]); });
}

function treeFromCsvTextArea() {
  var text = d3.select('#csv-text-input').property('value');
  csvData = d3.csvParse(text);

  // choose sequential values if key is not found in the csv
  var lastUsedColumn = 0;
  var columns = csvData.columns;
  if (!columns.includes(idKey)) {
    idKey = columns[lastUsedColumn];
    lastUsedColumn += 1;
  }
  if (!columns.includes(parentKey)) {
    parentKey = columns[lastUsedColumn];
    lastUsedColumn += 1;
  }
  if (!columns.includes(colorKey)) {
    colorKey = columns[lastUsedColumn];
    lastUsedColumn += 1;
  }
  if (!columns.includes(specialKey)) {
    specialKey = columns[lastUsedColumn];
    lastUsedColumn += 1;
  }

  // try to construct the tree
  try {
    var stratifier = d3
      .stratify()
      .id(function (d) { return d[idKey]; })
      .parentId(function (d) { return d[parentKey]; });
    rootNode = stratifier(csvData);
  } catch (e) {
    alert('Error occurred making tree: ' + e);
  }

  // run tree layout
  var tree = d3.tree().size([plotAreaWidth, plotAreaHeight]);
  tree(rootNode);

  console.log('got csvData =', csvData);
  console.log('got rootNode =', rootNode);
  console.log(idKey);

  function updateSelect(id, initialValue, updateFn) {
    // update the column selects
    var select = d3.select(("#" + id)).on('change', function() {
      updateFn(this.value);
      treeFromCsvTextArea();
      render();
    });

    var optionBinding = select.selectAll('option').data(csvData.columns);

    optionBinding.exit().remove();
    optionBinding
      .enter()
      .append('option')
      .merge(optionBinding)
      .property('value', function (d) { return d; })
      .text(function (d) { return d; });

    select.property('value', initialValue);
  }
  updateSelect('id-key-select', idKey, function (value) { return (idKey = value); });
  updateSelect('parent-key-select', parentKey, function (value) { return (parentKey = value); });
  updateSelect('color-key-select', colorKey, function (value) { return (colorKey = value); });
  updateSelect('special-key-select', specialKey, function (value) { return (specialKey = value); });
  d3.select('#width-input').on('change', function() {
    updateDimensions(+this.value, height);
    treeFromCsvTextArea();
    render();
  });
  d3.select('#height-input').on('change', function() {
    updateDimensions(width, +this.value);
    treeFromCsvTextArea();
    render();
  });

  var colorDomain = rootNode
    .descendants()
    .map(function (d) { return d.data[colorKey]; })
    .filter(function (d, i, a) { return a.indexOf(d) === i; })
    .sort();
  colorScale = d3.scaleOrdinal(d3.schemeSet1).domain(colorDomain);
  console.log('colorDomain', colorDomain);
  console.log('colorScale', colorScale);
}

treeFromCsvTextArea();
render();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzdF9zY3JpcHQuanMiLCJzb3VyY2VzIjpbInNjcmlwdC5qcy0xNTE5OTQ2ODE0Mjc2Il0sInNvdXJjZXNDb250ZW50IjpbImxldCBjc3ZEYXRhO1xubGV0IHJvb3ROb2RlO1xubGV0IGlkS2V5ID0gJ1NvdXJjZSc7XG5sZXQgcGFyZW50S2V5ID0gJ1RhcmdldCc7XG5sZXQgY29sb3JLZXkgPSAnRW1vdGlvbic7XG5sZXQgc3BlY2lhbEtleSA9ICdJc19JbmZsdWVuY2VyJztcbmNvbnN0IHNwZWNpYWxTaXplRmFjdG9yID0gMS42O1xubGV0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZU9yZGluYWwoKTtcbmxldCBoaWdobGlnaHROb2RlID0gbnVsbDtcblxuY29uc3QgcXVlcnlQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gIC5zdWJzdHJpbmcoMSlcbiAgLnNwbGl0KCcmJylcbiAgLmZpbHRlcihkID0+IGQgIT09ICcnKVxuICAucmVkdWNlKChwYXJhbXMsIHBhcmFtKSA9PiB7XG4gICAgY29uc3QgZW50cnkgPSBwYXJhbS5zcGxpdCgnPScpO1xuICAgIHBhcmFtc1tlbnRyeVswXV0gPSBlbnRyeVsxXTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9LCB7fSk7XG5cbmxldCB3aWR0aCA9IHF1ZXJ5UGFyYW1zLndpZHRoID8gK3F1ZXJ5UGFyYW1zLndpZHRoIDogODAwO1xubGV0IGhlaWdodCA9IHF1ZXJ5UGFyYW1zLmhlaWdodCA/ICtxdWVyeVBhcmFtcy5oZWlnaHQgOiA4MDA7XG5cbi8vIHBhZGRpbmcgYXJvdW5kIHRoZSBjaGFydCB3aGVyZSBheGVzIHdpbGwgZ29cbmNvbnN0IHBhZGRpbmcgPSB7XG4gIHRvcDogMjAsXG4gIHJpZ2h0OiAyMCxcbiAgYm90dG9tOiAyMCxcbiAgbGVmdDogMjAsXG59O1xuXG4vLyBpbm5lciBjaGFydCBkaW1lbnNpb25zLCB3aGVyZSB0aGUgZG90cyBhcmUgcGxvdHRlZFxubGV0IHBsb3RBcmVhV2lkdGggPSB3aWR0aCAtIHBhZGRpbmcubGVmdCAtIHBhZGRpbmcucmlnaHQ7XG5sZXQgcGxvdEFyZWFIZWlnaHQgPSBoZWlnaHQgLSBwYWRkaW5nLnRvcCAtIHBhZGRpbmcuYm90dG9tO1xuXG5mdW5jdGlvbiB1cGRhdGVEaW1lbnNpb25zKHcsIGgpIHtcbiAgd2lkdGggPSB3O1xuICBoZWlnaHQgPSBoO1xuXG4gIC8vIGlubmVyIGNoYXJ0IGRpbWVuc2lvbnMsIHdoZXJlIHRoZSBkb3RzIGFyZSBwbG90dGVkXG4gIHBsb3RBcmVhV2lkdGggPSB3aWR0aCAtIHBhZGRpbmcubGVmdCAtIHBhZGRpbmcucmlnaHQ7XG4gIHBsb3RBcmVhSGVpZ2h0ID0gaGVpZ2h0IC0gcGFkZGluZy50b3AgLSBwYWRkaW5nLmJvdHRvbTtcbn1cblxuLy8gcmFkaXVzIG9mIHBvaW50cyBpbiB0aGUgc2NhdHRlcnBsb3RcbmNvbnN0IHBvaW50UmFkaXVzID0gNTtcblxuLy8gc2VsZWN0IHRoZSByb290IGNvbnRhaW5lciB3aGVyZSB0aGUgY2hhcnQgd2lsbCBiZSBhZGRlZFxuY29uc3Qgcm9vdENvbnRhaW5lciA9IGQzLnNlbGVjdCgnI3Jvb3QnKTtcblxuZnVuY3Rpb24gcmVuZGVyKCkge1xuICByZW5kZXJDb250cm9scygpO1xuICByZW5kZXJMZWdlbmQoKTtcbiAgcmVuZGVyVHJlZSgpO1xuICByZW5kZXJIaWdobGlnaHQoKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29udHJvbHMoKSB7XG4gIGNvbnNvbGUubG9nKCdyZW5kZXIgY29udHJvbHMnKTtcbiAgZDMuc2VsZWN0KCcjcmVhZC1jc3YtYnRuJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgIHRyZWVGcm9tQ3N2VGV4dEFyZWEoKTtcbiAgICByZW5kZXIoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbChkKSB7XG4gIHJldHVybiAhIWRbc3BlY2lhbEtleV0gJiYgZFtzcGVjaWFsS2V5XSAhPT0gJzAnO1xufVxuXG5mdW5jdGlvbiByZW5kZXJIaWdobGlnaHQoKSB7XG4gIGNvbnN0IGhpZ2hsaWdodENvbnRhaW5lciA9IHJvb3RDb250YWluZXJcbiAgICAuc2VsZWN0KCcuaGlnaGxpZ2h0LWNvbnRhaW5lcicpXG4gICAgLmVtcHR5KClcbiAgICA/IHJvb3RDb250YWluZXJcbiAgICAgICAgLnNlbGVjdCgnLnZpcy1jb250YWluZXInKVxuICAgICAgICAuYXBwZW5kKCdkaXYnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlnaGxpZ2h0LWNvbnRhaW5lcicpXG4gICAgOiByb290Q29udGFpbmVyLnNlbGVjdCgnLmhpZ2hsaWdodC1jb250YWluZXInKTtcblxuICBpZiAoIWhpZ2hsaWdodE5vZGUpIHtcbiAgICBoaWdobGlnaHRDb250YWluZXIuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IGRhdGEgfSA9IGhpZ2hsaWdodE5vZGU7XG4gIGNvbnN0IGhpZ2hsaWdodFJvd0h0bWwgPSBPYmplY3Qua2V5cyhkYXRhKVxuICAgIC5tYXAoXG4gICAgICBrZXkgPT5cbiAgICAgICAgYDx0cj48dGQgY2xhc3M9J2tleSc+JHtrZXl9PC90ZD48dGQgY2xhc3M9J3ZhbHVlJz4ke2RhdGFba2V5XX0ke2tleSA9PT1cbiAgICAgICAgY29sb3JLZXlcbiAgICAgICAgICA/IGA8c3BhbiBjbGFzcz0nY29sb3Itc3dhdGNoJyBzdHlsZT0nYmFja2dyb3VuZDogJHtjb2xvclNjYWxlKFxuICAgICAgICAgICAgICBkYXRhW2tleV1cbiAgICAgICAgICAgICl9Jz48L3NwYW4+YFxuICAgICAgICAgIDogJyd9PC90ZD48L3RyPmBcbiAgICApXG4gICAgLmpvaW4oJycpO1xuXG4gIGhpZ2hsaWdodENvbnRhaW5lclxuICAgIC5zdHlsZSgnZGlzcGxheScsICcnKVxuICAgIC5odG1sKFxuICAgICAgYDx0YWJsZSBjbGFzcz0nbm9kZS10YWJsZSc+PHRib2R5PiR7aGlnaGxpZ2h0Um93SHRtbH08L3Rib2R5PjwvdGFibGU+YFxuICAgICk7XG5cbiAgY29uc3Qge1xuICAgIHdpZHRoOiBoV2lkdGgsXG4gICAgaGVpZ2h0OiBoSGVpZ2h0LFxuICB9ID0gaGlnaGxpZ2h0Q29udGFpbmVyLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBsZXQgeyB4LCB5IH0gPSBoaWdobGlnaHROb2RlO1xuICB4ICs9IHBhZGRpbmcubGVmdDtcbiAgeSArPSBwYWRkaW5nLnRvcDtcbiAgY29uc3QgaE1hcmdpbiA9IDU7XG5cbiAgaWYgKHkgKyBoSGVpZ2h0ID4gaGVpZ2h0KSB7XG4gICAgeSAtPSBoSGVpZ2h0O1xuICAgIHkgLT0gaE1hcmdpbjtcbiAgfSBlbHNlIHtcbiAgICB5ICs9IGhNYXJnaW47XG4gIH1cblxuICBpZiAoeCArIGhXaWR0aCA+IHdpZHRoKSB7XG4gICAgeCAtPSBoV2lkdGg7XG4gICAgeCAtPSBoTWFyZ2luO1xuICB9IGVsc2Uge1xuICAgIHggKz0gaE1hcmdpbjtcbiAgfVxuXG4gIHggPSBNYXRoLm1heCgwLCB4KTtcblxuICBjb25zb2xlLmxvZyhoaWdobGlnaHROb2RlLCB4LCB5KTtcbiAgaGlnaGxpZ2h0Q29udGFpbmVyLnN0eWxlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KWApO1xufVxuXG5mdW5jdGlvbiByZW5kZXJMZWdlbmQoKSB7XG4gIC8qKiBMZWdlbmQgKi9cbiAgY29uc3QgbGVnZW5kQ29udGFpbmVyID0gcm9vdENvbnRhaW5lci5zZWxlY3QoJy5sZWdlbmQnKS5lbXB0eSgpXG4gICAgPyByb290Q29udGFpbmVyLmFwcGVuZCgnZGl2JykuYXR0cignY2xhc3MnLCAnbGVnZW5kJylcbiAgICA6IHJvb3RDb250YWluZXIuc2VsZWN0KCcubGVnZW5kJyk7XG5cbiAgY29uc3QgbGVnZW5kQmluZGluZyA9IGxlZ2VuZENvbnRhaW5lclxuICAgIC5zZWxlY3RBbGwoJy5sZWdlbmQtaXRlbScpXG4gICAgLmRhdGEoY29sb3JTY2FsZS5kb21haW4oKSk7XG4gIGxlZ2VuZEJpbmRpbmcuZXhpdCgpLnJlbW92ZSgpO1xuICBjb25zdCBsZWdlbmRFbnRlcmluZyA9IGxlZ2VuZEJpbmRpbmdcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQtaXRlbScpXG4gICAgLmh0bWwoJyB0ZXNzc3NzdCcpO1xuICBsZWdlbmRFbnRlcmluZ1xuICAgIC5tZXJnZShsZWdlbmRCaW5kaW5nKVxuICAgIC5odG1sKFxuICAgICAgZCA9PlxuICAgICAgICBgPHNwYW4gY2xhc3M9J2xlZ2VuZC1zd2F0Y2gnIHN0eWxlPSdiYWNrZ3JvdW5kOiAke2NvbG9yU2NhbGUoXG4gICAgICAgICAgZFxuICAgICAgICApfSc+PC9zcGFuPjxzcGFuIGNsYXNzPSdsZWdlbmQtaXRlbS1sYWJlbCc+JHtkfTwvc3Bhbj4gYFxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclRyZWUoKSB7XG4gIGNvbnNvbGUubG9nKCdyZW5kZXIgc3ZnIHdpdGggcm9vdE5vZGUnLCByb290Tm9kZSk7XG4gIC8vIHJvb3RDb250YWluZXIuc2VsZWN0KCdzdmcnKS5yZW1vdmUoKTtcbiAgY29uc3Qgbm9kZXMgPSByb290Tm9kZSA/IHJvb3ROb2RlLmRlc2NlbmRhbnRzKCkgOiBbXTtcbiAgY29uc3QgbGlua3MgPSByb290Tm9kZSA/IHJvb3ROb2RlLmxpbmtzKCkgOiBbXTtcbiAgY29uc29sZS5sb2coJ3JlbmRlciBzdmcgd2l0aCBub2RlcycsIG5vZGVzKTtcbiAgY29uc29sZS5sb2coJ3JlbmRlciBzdmcgd2l0aCBsaW5rcycsIGxpbmtzKTtcblxuICAvLyBpbml0aWFsaXplIG1haW4gU1ZHXG4gIGNvbnN0IHN2ZyA9IHJvb3RDb250YWluZXIuc2VsZWN0KCdzdmcnKS5lbXB0eSgpXG4gICAgPyByb290Q29udGFpbmVyLnNlbGVjdCgnLnZpcy1jb250YWluZXInKS5hcHBlbmQoJ3N2ZycpXG4gICAgOiByb290Q29udGFpbmVyLnNlbGVjdCgnc3ZnJyk7XG5cbiAgc3ZnLmF0dHIoJ3dpZHRoJywgd2lkdGgpLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgLy8gdGhlIG1haW4gPGc+IHdoZXJlIGFsbCB0aGUgY2hhcnQgY29udGVudCBnb2VzIGluc2lkZVxuICBjb25zdCBnID0gc3ZnLnNlbGVjdCgnLnJvb3QtZycpLmVtcHR5KClcbiAgICA/IHN2Z1xuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Jvb3QtZycpXG4gICAgICAgIC5hdHRyKFxuICAgICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICd0cmFuc2xhdGUoJyArIHBhZGRpbmcubGVmdCArICcgJyArIHBhZGRpbmcudG9wICsgJyknXG4gICAgICAgIClcbiAgICA6IHN2Zy5zZWxlY3QoJy5yb290LWcnKTtcblxuICBjb25zdCBnTGlua3MgPSBnLnNlbGVjdCgnLmxpbmtzJykuZW1wdHkoKVxuICAgID8gZy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdsaW5rcycpXG4gICAgOiBnLnNlbGVjdCgnLmxpbmtzJyk7XG4gIGNvbnN0IGdOb2RlcyA9IGcuc2VsZWN0KCcubm9kZXMnKS5lbXB0eSgpXG4gICAgPyBnLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ25vZGVzJylcbiAgICA6IGcuc2VsZWN0KCcubm9kZXMnKTtcblxuICAvLyBjb25zdCBoaWdobGlnaHRMYWJlbCA9IGcuc2VsZWN0KCcuaGlnaGxpZ2h0LWxhYmVsJykuZW1wdHkoKVxuICAvLyAgID8gZ1xuICAvLyAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgLy8gICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hpZ2hsaWdodC1sYWJlbCcpXG4gIC8vICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAvLyAgICAgICAuYXR0cignZHknLCBwb2ludFJhZGl1cyArIDE4KVxuICAvLyAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJzYwMCcpXG4gIC8vICAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG4gIC8vICAgOiBnLnNlbGVjdCgnLmhpZ2hsaWdodC1sYWJlbCcpO1xuXG4gIC8vIHJlbmRlciBub2Rlc1xuICBjb25zdCBub2Rlc0JpbmRpbmcgPSBnTm9kZXMuc2VsZWN0QWxsKCcubm9kZScpLmRhdGEobm9kZXMsIGQgPT4gZFtpZEtleV0pO1xuICBub2Rlc0JpbmRpbmcuZXhpdCgpLnJlbW92ZSgpO1xuICBjb25zdCBub2Rlc0VudGVyID0gbm9kZXNCaW5kaW5nXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgIC5hdHRyKCdjbGFzcycsICdub2RlJylcbiAgICAuYXR0cigncicsIHBvaW50UmFkaXVzKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHtkLnh9ICR7ZC55fSlgKVxuICAgIC5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIC8vIGhpZ2hsaWdodExhYmVsXG4gICAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7ZC54fSAke2QueX0pYClcbiAgICAgIC8vICAgLnRleHQoSlNPTi5zdHJpbmdpZnkoZC5kYXRhKSk7XG4gICAgICBoaWdobGlnaHROb2RlID0gZDtcbiAgICAgIHJlbmRlckhpZ2hsaWdodCgpO1xuICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgfSlcbiAgICAub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGhpZ2hsaWdodExhYmVsLnRleHQoJycpO1xuICAgICAgaGlnaGxpZ2h0Tm9kZSA9IG51bGw7XG4gICAgICByZW5kZXJIaWdobGlnaHQoKTtcbiAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICB9KTtcblxuICBub2Rlc0VudGVyXG4gICAgLm1lcmdlKG5vZGVzQmluZGluZylcbiAgICAuY2xhc3NlZCgnc3BlY2lhbCcsIGQgPT4gaXNTcGVjaWFsKGQuZGF0YSkpXG4gICAgLmF0dHIoXG4gICAgICAncicsXG4gICAgICBkID0+IChpc1NwZWNpYWwoZC5kYXRhKSA/IHNwZWNpYWxTaXplRmFjdG9yICogcG9pbnRSYWRpdXMgOiBwb2ludFJhZGl1cylcbiAgICApXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke2QueH0gJHtkLnl9KWApXG4gICAgLnN0eWxlKCdmaWxsJywgZCA9PiBjb2xvclNjYWxlKGQuZGF0YVtjb2xvcktleV0pKTtcblxuICAvLyByZW5kZXIgbGlua3NcbiAgY29uc3QgbGlua3NCaW5kaW5nID0gZ0xpbmtzXG4gICAgLnNlbGVjdEFsbCgnLmxpbmsnKVxuICAgIC5kYXRhKGxpbmtzLCBkID0+IGAke2Quc291cmNlW2lkS2V5XX0tLSR7ZC50YXJnZXRbaWRLZXldfWApO1xuICBsaW5rc0JpbmRpbmcuZXhpdCgpLnJlbW92ZSgpO1xuXG4gIGNvbnN0IGxpbmtzRW50ZXIgPSBsaW5rc0JpbmRpbmdcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2xpbmUnKVxuICAgIC5hdHRyKCdjbGFzcycsICdsaW5rJylcbiAgICAuYXR0cigneDEnLCBkID0+IGQuc291cmNlLngpXG4gICAgLmF0dHIoJ3kxJywgZCA9PiBkLnNvdXJjZS55KVxuICAgIC5hdHRyKCd4MicsIGQgPT4gZC50YXJnZXQueClcbiAgICAuYXR0cigneTInLCBkID0+IGQudGFyZ2V0LnkpO1xuXG4gIGxpbmtzRW50ZXJcbiAgICAubWVyZ2UobGlua3NCaW5kaW5nKVxuICAgIC5hdHRyKCd4MScsIGQgPT4gZC5zb3VyY2UueClcbiAgICAuYXR0cigneTEnLCBkID0+IGQuc291cmNlLnkpXG4gICAgLmF0dHIoJ3gyJywgZCA9PiBkLnRhcmdldC54KVxuICAgIC5hdHRyKCd5MicsIGQgPT4gZC50YXJnZXQueSlcbiAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gY29sb3JTY2FsZShkLnRhcmdldC5kYXRhW2NvbG9yS2V5XSkpO1xufVxuXG5mdW5jdGlvbiB0cmVlRnJvbUNzdlRleHRBcmVhKCkge1xuICBjb25zdCB0ZXh0ID0gZDMuc2VsZWN0KCcjY3N2LXRleHQtaW5wdXQnKS5wcm9wZXJ0eSgndmFsdWUnKTtcbiAgY3N2RGF0YSA9IGQzLmNzdlBhcnNlKHRleHQpO1xuXG4gIC8vIGNob29zZSBzZXF1ZW50aWFsIHZhbHVlcyBpZiBrZXkgaXMgbm90IGZvdW5kIGluIHRoZSBjc3ZcbiAgbGV0IGxhc3RVc2VkQ29sdW1uID0gMDtcbiAgY29uc3QgeyBjb2x1bW5zIH0gPSBjc3ZEYXRhO1xuICBpZiAoIWNvbHVtbnMuaW5jbHVkZXMoaWRLZXkpKSB7XG4gICAgaWRLZXkgPSBjb2x1bW5zW2xhc3RVc2VkQ29sdW1uXTtcbiAgICBsYXN0VXNlZENvbHVtbiArPSAxO1xuICB9XG4gIGlmICghY29sdW1ucy5pbmNsdWRlcyhwYXJlbnRLZXkpKSB7XG4gICAgcGFyZW50S2V5ID0gY29sdW1uc1tsYXN0VXNlZENvbHVtbl07XG4gICAgbGFzdFVzZWRDb2x1bW4gKz0gMTtcbiAgfVxuICBpZiAoIWNvbHVtbnMuaW5jbHVkZXMoY29sb3JLZXkpKSB7XG4gICAgY29sb3JLZXkgPSBjb2x1bW5zW2xhc3RVc2VkQ29sdW1uXTtcbiAgICBsYXN0VXNlZENvbHVtbiArPSAxO1xuICB9XG4gIGlmICghY29sdW1ucy5pbmNsdWRlcyhzcGVjaWFsS2V5KSkge1xuICAgIHNwZWNpYWxLZXkgPSBjb2x1bW5zW2xhc3RVc2VkQ29sdW1uXTtcbiAgICBsYXN0VXNlZENvbHVtbiArPSAxO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGNvbnN0cnVjdCB0aGUgdHJlZVxuICB0cnkge1xuICAgIGNvbnN0IHN0cmF0aWZpZXIgPSBkM1xuICAgICAgLnN0cmF0aWZ5KClcbiAgICAgIC5pZChkID0+IGRbaWRLZXldKVxuICAgICAgLnBhcmVudElkKGQgPT4gZFtwYXJlbnRLZXldKTtcbiAgICByb290Tm9kZSA9IHN0cmF0aWZpZXIoY3N2RGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhbGVydCgnRXJyb3Igb2NjdXJyZWQgbWFraW5nIHRyZWU6ICcgKyBlKTtcbiAgfVxuXG4gIC8vIHJ1biB0cmVlIGxheW91dFxuICBjb25zdCB0cmVlID0gZDMudHJlZSgpLnNpemUoW3Bsb3RBcmVhV2lkdGgsIHBsb3RBcmVhSGVpZ2h0XSk7XG4gIHRyZWUocm9vdE5vZGUpO1xuXG4gIGNvbnNvbGUubG9nKCdnb3QgY3N2RGF0YSA9JywgY3N2RGF0YSk7XG4gIGNvbnNvbGUubG9nKCdnb3Qgcm9vdE5vZGUgPScsIHJvb3ROb2RlKTtcbiAgY29uc29sZS5sb2coaWRLZXkpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdChpZCwgaW5pdGlhbFZhbHVlLCB1cGRhdGVGbikge1xuICAgIC8vIHVwZGF0ZSB0aGUgY29sdW1uIHNlbGVjdHNcbiAgICBjb25zdCBzZWxlY3QgPSBkMy5zZWxlY3QoYCMke2lkfWApLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZUZuKHRoaXMudmFsdWUpO1xuICAgICAgdHJlZUZyb21Dc3ZUZXh0QXJlYSgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvcHRpb25CaW5kaW5nID0gc2VsZWN0LnNlbGVjdEFsbCgnb3B0aW9uJykuZGF0YShjc3ZEYXRhLmNvbHVtbnMpO1xuXG4gICAgb3B0aW9uQmluZGluZy5leGl0KCkucmVtb3ZlKCk7XG4gICAgb3B0aW9uQmluZGluZ1xuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAubWVyZ2Uob3B0aW9uQmluZGluZylcbiAgICAgIC5wcm9wZXJ0eSgndmFsdWUnLCBkID0+IGQpXG4gICAgICAudGV4dChkID0+IGQpO1xuXG4gICAgc2VsZWN0LnByb3BlcnR5KCd2YWx1ZScsIGluaXRpYWxWYWx1ZSk7XG4gIH1cbiAgdXBkYXRlU2VsZWN0KCdpZC1rZXktc2VsZWN0JywgaWRLZXksIHZhbHVlID0+IChpZEtleSA9IHZhbHVlKSk7XG4gIHVwZGF0ZVNlbGVjdCgncGFyZW50LWtleS1zZWxlY3QnLCBwYXJlbnRLZXksIHZhbHVlID0+IChwYXJlbnRLZXkgPSB2YWx1ZSkpO1xuICB1cGRhdGVTZWxlY3QoJ2NvbG9yLWtleS1zZWxlY3QnLCBjb2xvcktleSwgdmFsdWUgPT4gKGNvbG9yS2V5ID0gdmFsdWUpKTtcbiAgdXBkYXRlU2VsZWN0KCdzcGVjaWFsLWtleS1zZWxlY3QnLCBzcGVjaWFsS2V5LCB2YWx1ZSA9PiAoc3BlY2lhbEtleSA9IHZhbHVlKSk7XG4gIGQzLnNlbGVjdCgnI3dpZHRoLWlucHV0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZURpbWVuc2lvbnMoK3RoaXMudmFsdWUsIGhlaWdodCk7XG4gICAgdHJlZUZyb21Dc3ZUZXh0QXJlYSgpO1xuICAgIHJlbmRlcigpO1xuICB9KTtcbiAgZDMuc2VsZWN0KCcjaGVpZ2h0LWlucHV0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZURpbWVuc2lvbnMod2lkdGgsICt0aGlzLnZhbHVlKTtcbiAgICB0cmVlRnJvbUNzdlRleHRBcmVhKCk7XG4gICAgcmVuZGVyKCk7XG4gIH0pO1xuXG4gIGNvbnN0IGNvbG9yRG9tYWluID0gcm9vdE5vZGVcbiAgICAuZGVzY2VuZGFudHMoKVxuICAgIC5tYXAoZCA9PiBkLmRhdGFbY29sb3JLZXldKVxuICAgIC5maWx0ZXIoKGQsIGksIGEpID0+IGEuaW5kZXhPZihkKSA9PT0gaSlcbiAgICAuc29ydCgpO1xuICBjb2xvclNjYWxlID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZVNldDEpLmRvbWFpbihjb2xvckRvbWFpbik7XG4gIGNvbnNvbGUubG9nKCdjb2xvckRvbWFpbicsIGNvbG9yRG9tYWluKTtcbiAgY29uc29sZS5sb2coJ2NvbG9yU2NhbGUnLCBjb2xvclNjYWxlKTtcbn1cblxudHJlZUZyb21Dc3ZUZXh0QXJlYSgpO1xucmVuZGVyKCk7XG4iXSwibmFtZXMiOlsibGV0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